#include<iostream>
#include<assert.h>
using namespace std;
template<class T ,class V>
struct AVLTreeNode {
	AVLTreeNode(const pair<T,V> & kv)
		:_kv(kv), _bf(0), _pLeft(nullptr), _pRight(nullptr), _pParent(nullptr) {}
	AVLTreeNode<T,V>* _pLeft;
	AVLTreeNode<T,V>* _pRight;
	AVLTreeNode<T,V>* _pParent;
	pair<T, V> _kv;
	int _bf;
};

template<class T, class V>
class AVLTree {
public:
	typedef AVLTreeNode<T, V> Node;
	bool insert(const pair<T, V>& kv) {
		if (_root==nullptr) {
			_root =new Node(kv);
			return true;
		}
		Node* cru=_root;
		Node* parent = nullptr;
		while (cru) {
			if (cru->_kv.first > kv.first) {
				parent = cru;
				cru = cru->_pLeft;
			}
			else if (cru->_kv.first < kv.first) {
				parent = cru;
				cru = cru->_pRight;
			}
			else {
				return false;
			}
		}
		cru=new Node(kv);
		if (parent->_kv.first > kv.first) {
			parent->_pLeft = cru;
			cru->_pParent = parent;
		}
		else if(parent->_kv.first < kv.first) {
			parent->_pRight = cru;
			cru->_pParent = parent;
		}

		while (parent) {
			if (cru == parent->_pLeft) {
				parent->_bf--;
			}
			else if(cru == parent->_pRight) {
				parent->_bf++;
			}

			if (parent->_bf == 0) {
				return true;
			}
			else if (parent->_bf == 2||parent->_bf==-2) {
			if (parent->_bf == 2 && cru->_bf == 1) {

			}
			else if (parent->_bf == -2 && cru->_bf == -1) {

			}
			else if (parent->_bf == 2 && cru->_bf == -1) {

			}
			else if (parent->_bf == -2 && cru->_bf == 1) {

			}
			break;
			}
			else if (parent->_bf == 1 || parent->_bf == -1) {
				parent = parent->_pParent;
				cru = cru->_pParent;

			}
			else {
				assert(false);
			}
		}
		return true;
	}
	void inorder()//中序遍历:遍历完也就是有序的
	{
		_inorder(_root);
	}
	int height()
	{
		return _height(_root);
	}
	bool isbalance()
	{
		return _isbalance(_root);
	}
private:
	void RotateL(Node* parent){
		Node* subR = parent->_pRight;
		Node* subRL = subR->_pLeft;
		if (subRL) {
			subRL->_pParent = parent;
		}
		parent->_pRight = subRL;
		subR->_pLeft = parent;
		Node* ppNode = parent->_pParent;
		parent->_pParent = subR;
		if (_root == parent) {
			_root = subR;
			subR->_pParent = nullptr;
		}
		else {
			if (ppNode->_pLeft == parent) {
				ppNode->_pLeft = subR;

			}
			else {
				ppNode->_pRight = subR;
			}
			subR->_pParent = ppNode;
		}
		subR->_bf = parent->_bf = 0;
	}
	void RotateR(Node* parent) {
		Node* subL=parent->_pLeft;
		Node* subLR = subL->_pRight;
		if (subLR) {
			subLR->_pParent = parent;
		}
		parent->_pLeft = subLR;
		subL->_pRight = parent;
		Node* ppNode = parent->_pParent;
		parent->_pParent = subL;
		if (_root == parent) {
			_root = subL;
			subL->_pParent = nullptr;
		}
		else {
			if (ppNode->_pLeft == parent) {
				ppNode->_pLeft = subL;
				subL->_pParent = ppNode;
			}else {
				ppNode->_pLeft = subL;
				subL->_pParent = ppNode;
			}
		}
		parent->_bf = subL = 0;
	}

	void RotateLR(Node* parent) {
		Node* subL = parent->_pLeft;
		Node* subLR = parent->_pRight;
		RotateL(subL);
		RotateR(parent);
		if (subLR->_bf == 1) {
			subLR->_bf = 0;
			parent->_bf = 0;
			subL->_bf = -1;
		}
		else if (subLR->_bf == -1) {
			subLR->_bf = 0;
			parent->_bf = 1;
			subL->_bf = 0;
		}
		else if (subLR->_bf == 0) {
			subLR->_bf = 0;
			parent->_bf = 0;
			subL->_bf = 0;
		}
		else assert(false);

	}

	void RotateRL(Node* parent) {
		Node* subR = parent->_pRight;
		Node* subRL = subR->_pLeft;
		RotateR(subR);
		RotateL(parent);
		if (subRL->_bf == 1) {
			subRL->_bf = 0;
			parent->_bf = -1;
			subR->_bf = 0;
		}
		else if (subRL->_bf == -1) {
			subRL->_bf = 0;
			parent->_bf = 0;
			subR->_bf = 1;
		}
		else if (subRL->_bf == 0) {
			subRL->_bf = 0;
			parent->_bf = 0;
			subR->_bf = 0;
		}
		else assert(false);


	}
	

	bool _isbalance(Node* root) {
		if (root == nullptr) {
			return true;
		}
		int left = _height(root->_pLeft);
		int right = _height(root->_pRight);
		int gap = right - left;
		if (gap != root->_bf) {
			cout << "Pinghengyichang " << endl;
			return false;
		}
		return abs(gap) && _isbalance(root->_pLeft) && _isbalance(root->_pRight);
	}
	void _inorder(Node* root)
	{
		if (root == nullptr)
			return;
		_inorder(root->_pLeft);
		cout << root->_kv.first << " ";
		_inorder(root->_pRight);
	}
	int _height(Node* root)
	{
		if (root == nullptr)
			return 0;
		int leftheight = _height(root->_pLeft);
		int rightheight = _height(root->_pRight);
		return max(leftheight, rightheight) + 1;
	}

private:
	Node* _root = nullptr;
	
};

int main() {
	int a[] = { 4, 2, 6, 1, 3, 5, 15, 7, 16, 14 };
	AVLTree<int, int> t1;
	for (auto x : a)
		t1.insert(make_pair(x, x));
	t1.inorder();
	cout << t1.isbalance();
	return 0;
}
